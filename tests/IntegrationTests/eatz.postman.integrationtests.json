{
	"info": {
		"_postman_id": "765ec1b8-eb87-44ca-8297-d57970ee9186",
		"name": "EatZ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9532929"
	},
	"item": [
		{
			"name": "company flow",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "auth with company user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson =  pm.response.json();\r",
											"pm.collectionVariables.set(\"bearer_company\", responseJson.accessToken);\r",
											"\r",
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    pm.expect(responseJson.accessToken).to.not.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"company.test@example.com\",\r\n  \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "location",
					"item": [
						{
							"name": "search city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let cityName = \"Novo Hamburgo\";\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(cityName);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/location/?city=Novo Ha&offset=0&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"location",
										""
									],
									"query": [
										{
											"key": "city",
											"value": "Novo Ha"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get states by country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let lastId = \"27\";\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(lastId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/location/states?countryId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"location",
										"states"
									],
									"query": [
										{
											"key": "countryId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get cities by state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/location/cities?stateId=23",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"location",
										"cities"
									],
									"query": [
										{
											"key": "stateId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "stores",
					"item": [
						{
							"name": "create new store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"     pm.expect(pm.response).to.not.equal(null)\r",
											" });\r",
											"\r",
											"let storeId = pm.response.text();\r",
											"pm.collectionVariables.set(\"storeId\", storeId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Integration Test Store\",\r\n    \"documentNumber\": \"74479382000214\",\r\n    \"phone\": \"5551991502276\",\r\n    \"zipCode\": \"93548515\",\r\n    \"neighborhood\": \"Jardim Mauá\",\r\n    \"complement\": \"AP 304\",\r\n    \"cityId\": 4137,\r\n    \"street\": \"Av. Dr. Maurício Cardoso\",\r\n    \"streetNumber\": 2084,\r\n    \"description\": \"A Villa Baldo é um lugar bem legal, sobra sempre bastante comida.\",\r\n    \"logoImage\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/store",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "get store by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let storeId = pm.collectionVariables.get(\"storeId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(storeId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/store/{{storeId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"store",
										"{{storeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get stores by city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let storeId = pm.collectionVariables.get(\"storeId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(storeId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/store/?cityId=4137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"store",
										""
									],
									"query": [
										{
											"key": "cityId",
											"value": "4137"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get store by current user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let storeId = pm.collectionVariables.get(\"storeId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(storeId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/store",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"store"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "offers",
					"item": [
						{
							"name": "create new offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"     pm.expect(pm.response).to.not.equal(null)\r",
											" });\r",
											"\r",
											"let offerId = pm.response.text();\r",
											"pm.collectionVariables.set(\"offerId\", offerId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"storeId\": \"{{storeId}}\",\r\n  \"description\": \"Aqui vai a desrição da oferta com detalhes sobre o conteúdo.\",\r\n  \"netUnitPrice\": 5,\r\n  \"grossUnitPrice\": 15,\r\n  \"quantity\": 1,\r\n  \"taste\": \"Salty\",\r\n  \"expirationDate\": \"2023-05-26T13:30:59.421Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/offers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "update an offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"offerId\": \"{{offerId}}\",\r\n  \"description\": \"Descrição alterada\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/offers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get offers by city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let offerId = pm.collectionVariables.get(\"offerId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(offerId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/offers/city?cityId=4137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"offers",
										"city"
									],
									"query": [
										{
											"key": "cityId",
											"value": "4137"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get offers by store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let offerId = pm.collectionVariables.get(\"offerId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(offerId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/offers/store?storeId={{storeId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"offers",
										"store"
									],
									"query": [
										{
											"key": "storeId",
											"value": "{{storeId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "consumer flow",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "auth with consumer user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson =  pm.response.json();\r",
											"pm.collectionVariables.set(\"bearer_consumer\", responseJson.accessToken);\r",
											"\r",
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    pm.expect(responseJson.accessToken).to.not.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"consumer.test@example.com\",\r\n  \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "fail on register existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let responseData = pm.response.json();\r",
											"    pm.expect(responseData[0].message).to.eql(\"Já existe um usuário com esse email cadastrado.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"consumer test\",\r\n  \"email\": \"consumer.test@example.com\",\r\n  \"password\": \"123456\",\r\n  \"confirmPassword\": \"123456\",\r\n  \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "offers",
					"item": [
						{
							"name": "get offers by city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let offerId = pm.collectionVariables.get(\"offerId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(offerId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_consumer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/offers/city?cityId=4137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"offers",
										"city"
									],
									"query": [
										{
											"key": "cityId",
											"value": "4137"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "orders",
					"item": [
						{
							"name": "consumer create order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"     pm.expect(pm.response).to.not.equal(null)\r",
											" });\r",
											"\r",
											"let orderId = pm.response.text();\r",
											"pm.collectionVariables.set(\"orderId\", orderId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_consumer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"storeId\": \"{{storeId}}\",\r\n  \"offerId\": \"{{offerId}}\",\r\n  \"quantity\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "company confirm pick up",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_company}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderId\": {{orderId}},\r\n  \"status\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "consumer get order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let orderId = pm.collectionVariables.get(\"orderId\");\r",
											"    pm.expect(JSON.stringify(pm.response.json())).includes(orderId);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_consumer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "review",
					"item": [
						{
							"name": "create review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let reviewId = pm.response.text();\r",
											"pm.collectionVariables.set(\"reviewId\", reviewId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_consumer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"orderId\": {{orderId}},\r\n  \"comment\": \"Excelente!\",\r\n  \"rating\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/review",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"review"
									]
								}
							},
							"response": []
						},
						{
							"name": "check review rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response content\", function () {\r",
											"    let jsonObject = pm.response.json();\r",
											"    pm.expect(jsonObject[0].reviewRate).to.equal(5);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{bearer_consumer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "clean database",
			"item": [
				{
					"name": "/api/review/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearer_company}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/review/{{reviewId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"review",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/order/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearer_company}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/offer/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearer_company}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/offers/{{offerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"offers",
								"{{offerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/store/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearer_company}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/store/{{storeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"store",
								"{{storeId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://eatz-services.azurewebsites.net",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "storeId",
			"value": ""
		},
		{
			"key": "offerId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "bearer_consumer",
			"value": ""
		},
		{
			"key": "bearer_company",
			"value": ""
		},
		{
			"key": "reviewId",
			"value": ""
		}
	]
}